"""
Example of code geneation (single conv) with NNTool
"""

from nntool.api import NNGraph
from tqdm import tqdm
from glob import glob
from PIL import Image
import numpy as np


CAL_DATASET = "/opt/gap_sdk/examples/gap9/nn/nntool/mnist_dataset/calibration/*"
TEST_DATASET = "/opt/gap_sdk/examples/gap9/nn/nntool/mnist_dataset/test/*"

def preprocessing(img_arr):
    return (img_arr - 127.5) / 127.5

# Load the model in NNTool and apply static optimizations

G = NNGraph.load_graph("single_cnn.onnx")
G.adjust_order()
G.fusions("scaled_match_group")

# ## Quantization
# In order to quantize the model we need to collect statistics on real samples

cal_dataset = glob(CAL_DATASET)
def representative_dataset():
    for img in tqdm(cal_dataset):
        img = Image.open(img)
        yield preprocessing(np.array(img).astype(np.float32))

stats = G.collect_statistics(representative_dataset())

# Apply quantization options graph-wise and/or layer-wise.

G.quantize(
    stats,
    graph_options={
        "use_ne16": True,
        "hwc": True
    }
)

# ## Test Accuracy
# After quantization the model is ready for deployment. Test accuracy of the deployable model and compare to the full precision accuracy.

test_dataset = glob(TEST_DATASET)
def test_model(model, dataset, quant=True):
    correct = 0
    for img in tqdm(dataset):
        target = int(img.split("_")[-1].split(".")[0])
        img = Image.open(img)
        img = preprocessing(np.array(img).astype(np.float32))
        out = model.execute(img, dequantize=quant)
        pred = np.argmax(out[-1][0])
        correct += target == pred
    return correct * 100. / len(dataset)

# ## Run on target
# NNTool allows the user to directly get performance metrics of the platform directly from python APIs by generating a template project and run it.
# NOTE: the "gap9_project" was generated by this command, and then changed to adapt in a real application.

# Inference on a single image
test_img = test_dataset[0]
test_target = int(test_img.split("_")[-1].split(".")[0])
test_img = Image.open(test_img)
test_img = preprocessing(np.array(test_img).astype(np.float32))
qout = G.execute(test_img, quantize=True, dequantize=False)
int_test = qout[0][0]

directory = "./build/"
res = G.execute_on_target(
    directory=directory,
    input_tensors=[int_test],
    cmake=True,
    write_out_to_file=True,
    print_output=True,
    check_on_target=True,
    settings={
        "l1_size": 128000,
        "l2_size": 1300000,
        "tensor_directory": "tensors"
    }
)

print(res.stdout)

